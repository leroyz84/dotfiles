# interpreter for shell commands
set shell bash
set drawbox
#set relativenumber

#

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
#set scrolloff 0
#

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"


set previewer ~/.config/lf/lf-preview.sh
set preview true




# use enter for shell commands
map <enter> open
map w
map b $$SHELL

# execute current file (must be executable)
map x $$f
map X !$f

# make dd cut, but D trash
map d cut
#map dD trash
map D trash

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# pacman -S trash-cli
cmd trash ${{
	set -f
	if hash trash-put 2>/dev/null; then
		trash-put -v -- $fx
	else
		mkdir -p "$HOME"/.trash
		mv -vi $fx "$HOME"/.trash
	fi
}}

# define a custom 'delete' command
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read ans
    [ "$ans" = "y" ] && rm -rf $fx
}}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
map X delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    if [ -d $f ]; then
      echo tar cvfz `basename $fx`.tgz  -C ${PWD}  `basename $fx`
      tar cvfz `basename $fx`.tgz  -C ${PWD}  `basename $fx`
    else
      echo file
      pwd
      echo "fx: " $fx " "
      read
    fi
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd ezip ${{
    set -f
    zip --encrypt $1.zip $1
}}



# git stuff
cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd)
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}
map gb :git_branch
#map gp ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gs ${{clear; git status; echo "press ENTER"; read ENTER}}
map gl ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}

#fzf
map f $vim $(fzf)

cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump

# clipboard

cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard
map y
map yp :yank-path
map yf :yank-basename
map yy copy

# set title on cd
cmd on-cd &{{
    # '&' commands run silently in background (which is what we want here),
    # but are not connected to stdout.
    # To make sure our escape sequence still reaches stdout we pipe it to /dev/tty
    printf "\033]0; lf: $PWD\007" > /dev/tty
}}

# also run at startup
on-cd

cmd bookmark_jump ${{
    res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
    lf -remote "send $id cd \"$res\""
}}

cmd bookmark_create ${{
    read ans
    echo $PWD > $LF_BOOKMARK_PATH/$ans
}}

# extract
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

#cmd zip %zip -r "$f" "$f"
#cmd tar %tar cvfP "$f.tar" "$f"
#jcmd targz %tar cvzf "$f.tar.gz" "$f"
#cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Archive Mappings
map az zip
map at tar
map aez encyrpted zip
#map ag targz
#map ab targz
map au unarchive

map gth cd ~
map gts cd ~/SSV
map gtd cd ~/Downloads
map gtS cd ~/Study
map gtc cd ~/.config
map gtm cd /run/media/leroy
map gtt cd /tmp
map gtgh cd ~/github
map gtgl cd ~/gitlab
# toggle hidden
map . set hidden!

map <c-r> reload

# foo-bar.jpeg jump word back, jump char back, delete till home
cmd rename-base :rename;  cmd-word-back; cmd-left; cmd-delete-home
cmd rename-partial :rename
cmd rename-full :rename; cmd-delete-home

map c
map cc rename-full
map cw rename-partial
map cW rename-base


#
map <c-n> push $mkdir<space>

cmd copyto ${{
	clear; tput cup $(($(tput lines)/3)); tput bold
	set -f
	clear; echo "Copy to where?"
	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
	for x in $fx; do
		eval cp -ivr \"$x\" \"$dest\"
	done &&
	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

map V openfolder


cmd openfolder ${{
   echo $fx
   if [ -d $fx ]; then
     echo $fx
     # if movie files in dir; than start mpv
     if [[ `ls -1 "$fx" | grep -i -e avi -e mov -e mp4 -e mkv ` ]]; then
       mpv $fx
       exit
     fi

     # if pictures files in dir; than start feh
     if [[ `ls -1 "$fx" | grep -i -e jpeg -e jpg -e png -e gif ` ]]; then
       feh -Z  --scale-down $fx
       exit
     fi
   fi
}}
#map o open


cmd follow_link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}
map gL follow_link
